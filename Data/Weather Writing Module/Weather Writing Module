{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ee81c4d7",
   "metadata": {},
   "source": [
    "# Weather Writing Module"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a433ae2",
   "metadata": {},
   "source": [
    "#### Jun 3rd 2022: latest (and real) version"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f0afa3e",
   "metadata": {},
   "source": [
    "We get data from https://gmao.gsfc.nasa.gov/reanalysis/MERRA-2/.\n",
    "The data is given as hourly measurements across all locations, and you can select relevant regions to work with. We then take measurements made 24 times a day, (# of days) times a year at that location. \n",
    "The file format required in the toast atmospheric simulation is .fits. \n",
    "A code to open a .fits file will be provided below. \n",
    "A completed .fits file will have 12 (+ 1 primary, which is not used so you can make it whatever you want) layers called hdus, and in each of them we have 3D tables where the axes are \n",
    "Time (length 24), Variables (length 9), iCDF's domain (length 101). \n",
    "An iCDF is the inverse of a cumulative distribution function of the probability density function that each variable follows. The cumulative distribution function's value follows a uniform distribution in the interval [0,1].\n",
    "Assuming the PDF is Gaussian with mean and standard deviation found using general methods of statistical estimation yields plausible results, and thus we are going to work under that assumption.\n",
    "The variables required in the final format are: \n",
    "TQI, TQL, TQV, QV10M, PS, TS, T10M, U10M, V10M. \n",
    "To find out more about these, go to the .nc4 file (the original data from NASA) and run the code in the appendix."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd72764c",
   "metadata": {},
   "source": [
    "### Misc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "32c10f52",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import special as sp\n",
    "from astropy.io import fits\n",
    "from netCDF4 import Dataset\n",
    "from glob import glob\n",
    "import metpy.calc as mc\n",
    "from metpy.units import units"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f34c2d27",
   "metadata": {},
   "source": [
    "## Define the parameters and Relevant Dates"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5277ed01",
   "metadata": {},
   "source": [
    "### MERRA2\n",
    "If this is sufficient (i.e. has relevant data in terms of altitude etc., then we don't need any of the others. This code has been fine-tuned (a lot) because we could not find all the relevant data from MERRA2 measurements. If this doesn't apply, go to the simple version of the WWM code. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d012b4ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "JanList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202001*.nc4', ))\n",
    "FebList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202002*.nc4', ))\n",
    "MarList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202003*.nc4', ))\n",
    "AprList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202004*.nc4', ))\n",
    "MayList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202005*.nc4', ))\n",
    "JunList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202006*.nc4', ))\n",
    "JulList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202007*.nc4', ))\n",
    "AugList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202008*.nc4', ))\n",
    "SepList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202009*.nc4', ))\n",
    "OctList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202010*.nc4', ))\n",
    "NovList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202011*.nc4', ))\n",
    "DecList = sorted(glob('../WEATHER_DATA/MERRA2-Data/*202012*.nc4', ))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7571a764",
   "metadata": {},
   "source": [
    "### Stella\n",
    "Measurements from STELLA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0c9c4ba9",
   "metadata": {},
   "outputs": [],
   "source": [
    "JanList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/01/*stella*.raw', ))\n",
    "FebList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/02/*stella*.raw', ))\n",
    "MarList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/03/*stella*.raw', ))\n",
    "AprList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/04/*stella*.raw', ))\n",
    "MayList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/05/*stella*.raw', ))\n",
    "JunList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/06/*stella*.raw', ))\n",
    "JulList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/07/*stella*.raw', ))\n",
    "AugList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/08/*stella*.raw', ))\n",
    "SepList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/09/*stella*.raw', ))\n",
    "OctList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/10/*stella*.raw', ))\n",
    "NovList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/11/*stella*.raw', ))\n",
    "DecList_st = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/12/*stella*.raw', ))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8c64230",
   "metadata": {},
   "source": [
    "### Gaulli\n",
    "Measurements from GAULLI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "375f8948",
   "metadata": {},
   "outputs": [],
   "source": [
    "JanList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/01/*gaulli*.raw', ))\n",
    "FebList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/02/*gaulli*.raw', ))\n",
    "MarList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/03/*gaulli*.raw', ))\n",
    "AprList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/04/*gaulli*.raw', ))\n",
    "MayList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/05/*gaulli*.raw', ))\n",
    "JunList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/06/*gaulli*.raw', ))\n",
    "JulList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/07/*gaulli*.raw', ))\n",
    "AugList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/08/*gaulli*.raw', ))\n",
    "SepList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/09/*gaulli*.raw', ))\n",
    "OctList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/10/*gaulli*.raw', ))\n",
    "NovList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/11/*gaulli*.raw', ))\n",
    "DecList_g = sorted(glob('../WEATHER_DATA/gb/logdata/weather/2020/12/*gaulli*.raw', ))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb4a64d3",
   "metadata": {},
   "source": [
    "### Additional PWV measurements\n",
    "In case there are months with missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "52c6c975",
   "metadata": {},
   "outputs": [],
   "source": [
    "PWVM = '../WEATHER_DATA/weather/pwv_izan_final_20200101_20201231.dat'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "075f7cd2",
   "metadata": {},
   "source": [
    "### Set relevant parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a225f0c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "lon_Teide = -16.3081\n",
    "lat_Teide = 28.4746\n",
    "dlon = 0.5\n",
    "dlat = 0.5\n",
    "\n",
    "p_Teide = 75626\n",
    "dp = 1000"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a75806d",
   "metadata": {},
   "source": [
    "## Define the Reading Functions for Different Sources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "574e6481",
   "metadata": {},
   "outputs": [],
   "source": [
    "# These are components in a different function and are not directly executed.\n",
    "def ReadMERRA(file):\n",
    "    \n",
    "    #open file\n",
    "    xx = Dataset(file)\n",
    "    # MERRA data is very broad, and need to be filtered \n",
    "    # while other additional measurements are specific to our desired location.\n",
    "    \n",
    "    #define lons, lats and time\n",
    "    lons = xx.variables['lon'][:]\n",
    "    lats = xx.variables['lat'][:]\n",
    "    time = xx.variables['time'][:] #minutes\n",
    "    \n",
    "    #find index for appropriate longitude\n",
    "    ilo1 = lons>(lon_Teide-dlon)\n",
    "    ilo2 = lons<(lon_Teide+dlon)\n",
    "    ilo = ilo1 & ilo2\n",
    "    lonind = np.where(ilo)\n",
    "    \n",
    "    #find index for appropriate latitude\n",
    "    ila1 = lats>(lat_Teide-dlat)\n",
    "    ila2 = lats<(lat_Teide+dlat)\n",
    "    ila = ila1 & ila2\n",
    "    latind = np.where(ila)\n",
    "    \n",
    "    #extract values for needed variables within the desired position index\n",
    "    tqi = xx.variables['TQI'][:]\n",
    "    TQI_ = tqi[:,latind,lonind]\n",
    "    tql = xx.variables['TQL'][:]\n",
    "    TQL_ = tql[:,latind,lonind]\n",
    "    tqv = xx.variables['TQV'][:]\n",
    "    TQV_ = tqv[:,latind,lonind]\n",
    "    qv10m = xx.variables['QV10M'][:]\n",
    "    QV10M_ = qv10m[:,latind,lonind]\n",
    "    ps = xx.variables['PS'][:]\n",
    "    PS_ = ps[:,latind,lonind]\n",
    "    ts = xx.variables['TS'][:]\n",
    "    TS_ = ts[:,latind,lonind]\n",
    "    t10m = xx.variables['T10M'][:]\n",
    "    T10M_ = t10m[:,latind,lonind]\n",
    "    u10m = xx.variables['U10M'][:]\n",
    "    U10M_ = u10m[:,latind,lonind]\n",
    "    v10m = xx.variables['V10M'][:]\n",
    "    V10M_ = v10m[:,latind,lonind]\n",
    "    \n",
    "    #turn the multidimensional array into a nice 1D one\n",
    "    TQI = np.squeeze((np.transpose(TQI_))[0])\n",
    "    TQL = np.squeeze((np.transpose(TQL_))[0])\n",
    "    TQV = np.squeeze((np.transpose(TQV_))[0])\n",
    "    QV10M = np.squeeze((np.transpose(QV10M_))[0])\n",
    "    PS = np.squeeze((np.transpose(PS_))[0])\n",
    "    TS = np.squeeze((np.transpose(TS_))[0])\n",
    "    T10M = np.squeeze((np.transpose(T10M_))[0])\n",
    "    U10M = np.squeeze((np.transpose(U10M_))[0])\n",
    "    V10M = np.squeeze((np.transpose(V10M_))[0])\n",
    "    \n",
    "    return [TQI, TQL, TQV, QV10M, PS, TS, T10M, U10M, V10M]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "72738090",
   "metadata": {},
   "outputs": [],
   "source": [
    "# These are components in a different function and are not directly executed.\n",
    "def ReadSTELLA(file):\n",
    "    f = open(file)\n",
    "    columns = []\n",
    "\n",
    "    # These reading functions are very fine tuned to fish out failed measurements. \n",
    "    for line in f:\n",
    "        x = line.split('  ')\n",
    "        if len(x)>9 and isinstance(x[3],float)==True:\n",
    "            if ':00:' in x[0]:\n",
    "                xrow = [x[3],x[4],x[5],x[7],x[8]]\n",
    "                columns.append(xrow)\n",
    "            elif ':59:' in x[0] or ':01:' in x[0]:\n",
    "                xrow = [x[3],x[4],x[5],x[7],x[8]]\n",
    "                columns.append(xrow)\n",
    "            elif ':58:' in x[0] or ':02:' in x[0]:\n",
    "                xrow = [x[3],x[4],x[5],x[7],x[8]]\n",
    "                columns.append(xrow)\n",
    "        # These are AirTemp, Hum, PS, WindMag, WindDir        \n",
    "    if len(columns)<24:\n",
    "        return -1\n",
    "\n",
    "    else:\n",
    "        while len(columns)>24:\n",
    "            cs = np.delete(columns,len(columns)-1,0)\n",
    "            columns = cs\n",
    "        Cols = np.array(columns)\n",
    "        Rows = np.transpose(Cols)\n",
    "    \n",
    "        return Rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "1cebd874",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ReadSTELLA_alt(file):\n",
    "    f = open(file)\n",
    "    columns = []\n",
    "\n",
    "    number = []\n",
    "    for i in range(0,24):\n",
    "        number.append(12*i+1)\n",
    "        \n",
    "    # These reading functions are very fine tuned to fish out failed measurements. \n",
    "    for line in f:\n",
    "        x = line.split('  ')\n",
    "        if len(x)>9:\n",
    "            xrow = [x[3],x[4],x[5],x[7],x[8]]\n",
    "            columns.append(xrow)\n",
    "    \n",
    "    if len(columns)<278:\n",
    "        return -1\n",
    "    \n",
    "    else:\n",
    "\n",
    "        effective_cols = []\n",
    "        for j in number:\n",
    "            effective_cols.append(columns[j])\n",
    "        # Gaulli Data has to be taken once every two lines. \n",
    "        # The measurements weren't done at :00 so we manually take every second line.\n",
    "    \n",
    "        Cols = np.array(effective_cols)\n",
    "        \n",
    "        if not len(Cols)==24:\n",
    "            return -1\n",
    "        else:\n",
    "            Rows = np.transpose(Cols)\n",
    "            return Rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01439d6a",
   "metadata": {},
   "source": [
    "These are components in a different function and are not directly executed.\n",
    "def ReadSTELLATEST(file):\n",
    "    f = open(file)\n",
    "    rows = []\n",
    "    for line in f:\n",
    "        x = line.split('  ')\n",
    "        print(x)\n",
    "        print(len(x))\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "0b813ff0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ReadGAULLI(file):\n",
    "    f = open(file)\n",
    "    columns = []\n",
    "\n",
    "    number = []\n",
    "    for i in range(0,24):\n",
    "        number.append(2*i+1)\n",
    "        \n",
    "    for line in f:\n",
    "        x = line.split('  ')\n",
    "        if len(x)>3:\n",
    "            pwv__ = x[3]\n",
    "            columns.append(pwv__)\n",
    "    # PWV\n",
    "        \n",
    "    if not len(columns)>47:\n",
    "        return -1\n",
    "    \n",
    "    else:\n",
    "\n",
    "        effective_cols = []\n",
    "        for j in number:\n",
    "            effective_cols.append(columns[j])\n",
    "        # Gaulli Data has to be taken once every two lines. \n",
    "        # The measurements weren't done at :00 so we manually take every second line.\n",
    "    \n",
    "        Cols = np.array(effective_cols)\n",
    "        \n",
    "        if not len(Cols)==24:\n",
    "            return -1\n",
    "        else:\n",
    "            return Cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "f763b167",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ReadPWV(file,monthlabel):\n",
    "    f = open(file)\n",
    "    \n",
    "    # data from Mike: \n",
    "    # Date, UT (=UTC), PWV\n",
    "    # So PWV would be [2]\n",
    "    numdays = [31,29,31,30,31,30,31,31,30,31,30,31]\n",
    "    number1 = range(0,9)\n",
    "    number2 = range(9,numdays[int(monthlabel)-1])\n",
    "    number = range(0,numdays[int(monthlabel)-1])\n",
    "        # 2020 is a leap year.\n",
    "    \n",
    "    d1 = []\n",
    "    d2 = []\n",
    "    d3 = []\n",
    "    d4 = []\n",
    "    d5 = []\n",
    "    d6 = []\n",
    "    d7 = []\n",
    "    d8 = []\n",
    "    d9 = []\n",
    "    d10 = []\n",
    "    d11 = []\n",
    "    d12 = []\n",
    "    d13 = []\n",
    "    d14 = []\n",
    "    d15 = []\n",
    "    d16 = []\n",
    "    d17 = []\n",
    "    d18 = []\n",
    "    d19 = []\n",
    "    d20 = []\n",
    "    d21 = []\n",
    "    d22 = []\n",
    "    d23 = []\n",
    "    d24 = []\n",
    "    d25 = []\n",
    "    d26 = []\n",
    "    d27 = []\n",
    "    d28 = []\n",
    "    d29 = []\n",
    "    d30 = []\n",
    "    d31 = []\n",
    "    days = [d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d20,d21,d22,d23,d24,d25,d26,d27,d28,d29,d30,d31]\n",
    "    \n",
    "    for line in f:    \n",
    "        x = line.split(',')\n",
    "        \n",
    "        for i in number1:\n",
    "            if '/'+monthlabel+'/0'+str(i+1) in x[0]:\n",
    "                if ':00' in x[1]:\n",
    "                    days[i].append(float(x[2]))\n",
    "\n",
    "        for i in number2:\n",
    "            if '/'+monthlabel+'/'+str(i+1) in x[0]:\n",
    "                if ':00' in x[1]:\n",
    "                    days[i].append(float(x[2]))\n",
    "    \n",
    "    somethingwrong = False\n",
    "    \n",
    "    newdays = []\n",
    "    for i in range(0,31):\n",
    "        if len(days[i]) == 24:\n",
    "            newdays.append(days[i])\n",
    "    \n",
    "    if len(newdays) == 0:\n",
    "        somethingwrong = True\n",
    "    \n",
    "    if somethingwrong == True:\n",
    "        return -1\n",
    "    \n",
    "    else:\n",
    "        dayss = []\n",
    "        # For some reason the rows of days are lists and not arrays. We're gonna fix that.\n",
    "        for i in range(0,len(newdays)):\n",
    "            dayss.append(np.array(newdays[i]))\n",
    "        \n",
    "        return dayss\n",
    "    \n",
    "# Remember that additional-measurement-PWV is fetched \n",
    "# from a single file instead of separate ones for each date.    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ed8ca8d",
   "metadata": {},
   "source": [
    "## Define Each Variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df91ecfe",
   "metadata": {},
   "source": [
    "0 TQI / 1 TQL / 2 TQV / 3 QV10M / 4 PS / 5 TS / 6 T10M / 7 U10M / 8 V10M ///////////\n",
    "0 PWV //////////\n",
    "0 Hum / 1 PS / 2 AirTemp / 3 WindMag / 4 WindDir"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a7165a5",
   "metadata": {},
   "source": [
    "http://stella-archive.aip.de/stella/status/getdetail.php?typ=4&typ2=0&from=08.02.2022+00%3A00%3A00&until=15.02.2022+10%3A13&size=2&submit=submit\n",
    "\n",
    "Kawashima, S., Ishida, T., Minomura, M., & Miwa, T. (2000). Relations between Surface Temperature and Air Temperature on a Local Scale during Winter Nights, Journal of Applied Meteorology, 39(9), 1570-1579. Retrieved Feb 10, 2022, from https://journals.ametsoc.org/view/journals/apme/39/9/1520-0450_2000_039_1570_rbstaa_2.0.co_2.xml\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "8b16f5b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def WritefromM(MSet):\n",
    "    Listie1 = []\n",
    "    Listie2 = []\n",
    "    \n",
    "    for MFile in MSet:\n",
    "        \n",
    "        # TQI, TQL are not highly significant in the sim, and I have thus\n",
    "        # used existing MERRA data for these two variables despite the \n",
    "        # elevation difference. \n",
    "        TQI = ReadMERRA(MFile)[0]\n",
    "        TQL = ReadMERRA(MFile)[1]\n",
    "        \n",
    "        Listie1.append(TQI)\n",
    "        Listie2.append(TQL)\n",
    "    return [Listie1,Listie2]\n",
    "        \n",
    "def whichRS(SFile):\n",
    "    global S_still_Problem \n",
    "    if S_still_Problem == False:\n",
    "        return ReadSTELLA(SFile)\n",
    "    if S_still_Problem == True:\n",
    "        return ReadSTELLA_alt(SFile)\n",
    "    \n",
    "def S_Try1(SSet):\n",
    "    Listie3 = []\n",
    "    Listie4 = []\n",
    "    Listie5 = []\n",
    "    Listie6 = []\n",
    "    Listie7 = []\n",
    "    Listie8 = []\n",
    "    Listie9 = []\n",
    "    \n",
    "    for SFile in SSet:\n",
    "        global S_Problem\n",
    "        RSF = whichRS(SFile)\n",
    "        \n",
    "        if not RSF == -1:\n",
    "            S_Problem = False\n",
    "            # Show me where you're at\n",
    "           \n",
    "            # See the paper cited above\n",
    "            T10M = 273.15+np.asarray(RSF[0],dtype=float)\n",
    "            TS = 1.98*(T10M-273.15)-7.25+273.15\n",
    "            # hPa to Pa\n",
    "            PS = 100*np.asarray(RSF[2],dtype=float)\n",
    "            # We take Northward and Eastward components from magnitude and angle.\n",
    "            # Angle is defined 0 deg = North Wind (Southward) and ascending clockwise.\n",
    "            NewAngle = 270-np.asarray(RSF[4],dtype=float)\n",
    "            U10M = np.asarray(RSF[3],dtype=float)*np.cos(NewAngle)\n",
    "            V10M = np.asarray(RSF[3],dtype=float)*np.sin(NewAngle)\n",
    "            # Compute using metpy. Was originally going to use the Ideal Gas Eq. \n",
    "            # But this is more precise and efficient\n",
    "            pressure = units.Quantity(PS,'Pa')\n",
    "            temperature = units.Quantity(T10M,'K')\n",
    "            mix = mc.mixing_ratio_from_relative_humidity(pressure,temperature,0.01*np.asarray(RSF[1],dtype=float))\n",
    "            QV10M = mc.specific_humidity_from_mixing_ratio(mix)\n",
    "        \n",
    "            Listie4.append(QV10M)\n",
    "            Listie5.append(PS)\n",
    "            Listie6.append(TS)\n",
    "            Listie7.append(T10M)\n",
    "            Listie8.append(U10M)\n",
    "            Listie9.append(V10M)\n",
    "    return [Listie4,Listie5,Listie6,Listie7,Listie8,Listie9]\n",
    "    \n",
    "def S_Try2(year,monthlabel):\n",
    "    global S_still_Problem\n",
    "    print('There was a problem with the Stella data for Month '+monthlabel)\n",
    "    print('Initiating manual reading...')\n",
    "    Alt_list= sorted(glob('../WEATHER_DATA/gb/logdata/weather/'+str(year)+'/'+monthlabel+'/*stella*.raw', ))\n",
    "    s = S_Try1(Alt_list)\n",
    "    if len(s[0]) > 0:\n",
    "        S_still_Problem = False\n",
    "    return s\n",
    "\n",
    "def WritefromS(SSet,year1,monthlabel):\n",
    "    global S_Problem\n",
    "    global S_still_Problem\n",
    "    S_Problem = True\n",
    "    S_still_Problem = False\n",
    "    s1 = S_Try1(SSet)\n",
    "    if S_Problem == False:\n",
    "        return s1\n",
    "    if S_Problem == True:\n",
    "        S_still_Problem = True\n",
    "        s2 = S_Try2(year1,monthlabel)\n",
    "        if S_still_Problem == False:\n",
    "            return s2\n",
    "        if S_still_Problem == True:\n",
    "            print('There was a problem with the Stella data for Month '+monthlabel)\n",
    "            print('Initiating manual reading 2...')\n",
    "            return S_Try1(SSet)\n",
    "\n",
    "def PWV_Try1(GSet):\n",
    "    global G_Problem\n",
    "    Listie3 = []\n",
    "    \n",
    "    for GFile in GSet:\n",
    "        RGF = ReadGAULLI(GFile)\n",
    "        if not RGF == -1:\n",
    "            # TQV is taken directly from the source (PWV), and the units\n",
    "            # kg/m^2 and mm are equal assuming water density as 1 g / cm^3.\n",
    "            TQV = np.asarray(RGF,dtype=float)\n",
    "            Listie3.append(TQV)\n",
    "            \n",
    "    if len(Listie3)<1:\n",
    "        G_Problem = True\n",
    "    return [Listie3]\n",
    "\n",
    "def PWV_Try2(PFile,monthlabel):\n",
    "    print('There was a problem with the Gaulli data for Month '+monthlabel)\n",
    "    print('Initiating manual reading...')\n",
    "    Listie3 = []\n",
    "    Listie3 = ReadPWV(PFile,monthlabel)\n",
    "    return [Listie3]\n",
    "\n",
    "def WritePWV(GSet,PFile,monthlabel):\n",
    "    global G_Problem\n",
    "    G_Problem = False\n",
    "    PWV_Try1(GSet)\n",
    "    if G_Problem == False:\n",
    "        return PWV_Try1(GSet)\n",
    "    if G_Problem == True:\n",
    "        return PWV_Try2(PFile,monthlabel)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c87f5c0d",
   "metadata": {},
   "source": [
    "https://wiki.usask.ca/pages/viewpage.action?pageId=380797075"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "d87fef4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetStatistics(MSet,SSet,GSet,PFile):\n",
    "    \n",
    "    # Listie1 / 2      / 3      / 4       / 5      / 6       / 7      / 8       / 9\n",
    "    # 0 TQI   / 1 TQL  / 2 TQV  / 3 QV10M / 4 PS   / 5 TS    / 6 T10M / 7 U10M  / 8 V10M\n",
    "    # WfM[0]  / WfM[2] / PWV[0] / WfS[0]  / WfS[1] / WfS [2] / WfS[3] / Wfs [4] / WfS[5]\n",
    "\n",
    "    ind = MSet[0].index('2020') \n",
    "    monthlabel = MSet[0][ind+4:ind+6]\n",
    "    # Since MERRA has all daily data it's used to define the monthlabel.\n",
    "   \n",
    "    # Show me where you're at\n",
    "    print('Month '+str(monthlabel)+': Reading data...')\n",
    "    \n",
    "    # Write variables / Turn to arrays of (len)_24\n",
    "    # To make it faster:\n",
    "    w1,w2,w3 = WritefromM(MSet),WritePWV(GSet,PFile,monthlabel),WritefromS(SSet,2019,monthlabel)\n",
    "    thing1 = np.array(w1[0])\n",
    "    thing2 = np.array(w1[1])\n",
    "    thing3 = np.array(w2[0])\n",
    "    thing4 = np.array(w3[0])\n",
    "    thing5 = np.array(w3[1])\n",
    "    thing6 = np.array(w3[2])\n",
    "    thing7 = np.array(w3[3])\n",
    "    thing8 = np.array(w3[4])\n",
    "    thing9 = np.array(w3[5])\n",
    "    \n",
    "    print('Computing mean values...')\n",
    "    \n",
    "    # arrays of 24\n",
    "    daymean1 = np.mean(thing1, axis = 0)\n",
    "    daymean2 = np.mean(thing2, axis = 0)\n",
    "    daymean3 = np.mean(thing3, axis = 0)\n",
    "    daymean4 = np.mean(thing4, axis = 0)\n",
    "    daymean5 = np.mean(thing5, axis = 0)\n",
    "    daymean6 = np.mean(thing6, axis = 0)\n",
    "    daymean7 = np.mean(thing7, axis = 0)\n",
    "    daymean8 = np.mean(thing8, axis = 0)\n",
    "    daymean9 = np.mean(thing9, axis = 0)\n",
    "    \n",
    "    print('Computing standard deviations...')\n",
    "    \n",
    "    # arrays of 24\n",
    "    daystdev1 = (len(thing1)-1)*np.std(thing1, axis = 0)\n",
    "    daystdev2 = (len(thing2)-1)*np.std(thing2, axis = 0)\n",
    "    daystdev3 = (len(thing3)-1)*np.std(thing3, axis = 0)\n",
    "    daystdev4 = (len(thing4)-1)*np.std(thing4, axis = 0)\n",
    "    daystdev5 = (len(thing5)-1)*np.std(thing5, axis = 0)\n",
    "    daystdev6 = (len(thing6)-1)*np.std(thing6, axis = 0)\n",
    "    daystdev7 = (len(thing7)-1)*np.std(thing7, axis = 0)\n",
    "    daystdev8 = (len(thing8)-1)*np.std(thing8, axis = 0)\n",
    "    daystdev9 = (len(thing9)-1)*np.std(thing9, axis = 0)\n",
    "    \n",
    "    print('Number of day data for the month '+monthlabel+':')\n",
    "    print('TQI, TQL : '+str(len(thing1)))\n",
    "    print('TQV : '+str(len(thing3)))    \n",
    "    print('All others : '+str(len(thing4)))\n",
    "          \n",
    "    print('Making table...')\n",
    "    \n",
    "    table9_2_24 = np.array([np.array([daymean1,daystdev1]),\n",
    "     np.array([daymean2,daystdev2]),\n",
    "     np.array([daymean3,daystdev3]),\n",
    "     np.array([daymean4,daystdev4]),\n",
    "     np.array([daymean5,daystdev5]),\n",
    "     np.array([daymean6,daystdev6]),\n",
    "     np.array([daymean7,daystdev7]),\n",
    "     np.array([daymean8,daystdev8]),\n",
    "     np.array([daymean9,daystdev9])])\n",
    "    \n",
    "    table2_24_9 = np.transpose(table9_2_24,(1,2,0))\n",
    "    \n",
    "    print('Month done')\n",
    "    print('')\n",
    "    \n",
    "    # this is np.array([daymean,daystdev])\n",
    "    return table2_24_9"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea0d6b9c",
   "metadata": {},
   "source": [
    "This function changed in 1.0--double check that the function is being called properly.\n",
    "`mixing_ratio_from_relative_humidity` given arguments with incorrect units: `pressure` requires \"[pressure]\" but given \"none\", `temperature` requires \"[temperature]\" but given \"none\"\n",
    "Any variable `x` can be assigned a unit as follows:\n",
    "    from metpy.units import units\n",
    "    x = units.Quantity(x, \"m/s\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "263b5ce2",
   "metadata": {},
   "source": [
    "## Create Monthly Table and Replace Day Data with ICDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "aff482bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I mean you COULD fully automate the process of finding which measurement to use for the \n",
    "# respective variables but I am decidedly lazy so"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "725b7fa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ConstructCDF(Obj): #MuSigmaList ##abbr. MSL\n",
    "    #     idea:\n",
    "    #     3Darray[i,j,k] := x such that f(x, daymean[i,j], daystdev[i,j]) = k/101\n",
    "    #     sometimes I with mathematicians made coding languages\n",
    "    #     like, I just hate not having a 'such that' in python.\n",
    "    \n",
    "    ##    CDF = (1/2)*(1+sp.erf((x-MSL[0])/(((np.sqrt(2))*MSL[1])))\n",
    "    ##    iCDF as a function of erfinv:\n",
    "    ##     = ((np.sqrt(2))*MSL[1]*sp.erfinv(2*x-1))+MSL[0]\n",
    "    \n",
    "    print('Constructing CDF...')\n",
    "    print('')\n",
    "    print('')\n",
    "    NewList = []\n",
    "    \n",
    "    for n in np.linspace(0.001,0.999,101):\n",
    "        NewList.append(((np.sqrt(2))*Obj[1]*sp.erfinv(2*n-1))+Obj[0])\n",
    "    \n",
    "    table101_24_9 = np.array(NewList)\n",
    "    \n",
    "    table24_9_101 = np.transpose(table101_24_9,(1,2,0))\n",
    "    \n",
    "    table9_24_101 = np.transpose(table101_24_9,(2,1,0))\n",
    "    \n",
    "    return table9_24_101"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6722ee6",
   "metadata": {},
   "source": [
    "## Write"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1368605b",
   "metadata": {},
   "source": [
    "https://docs.astropy.org/en/stable/io/fits/index.html\n",
    "#### Above is a tutorial on how to create a new FITs file. For future reference!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "1752a746",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define FITS TABLE Writing Function\n",
    "\n",
    "def WriteTable(Obj):\n",
    "    \n",
    "    cTQI = fits.Column(name='TQI', format='101D', array=np.array(Obj[0]))\n",
    "    cTQL = fits.Column(name='TQL', format='101D', array=np.array(Obj[1]))\n",
    "    cTQV = fits.Column(name='TQV', format='101D', array=np.array(Obj[2]))\n",
    "    cQV10M = fits.Column(name='QV10M', format='101D', array=np.array(Obj[3]))\n",
    "    cPS = fits.Column(name='PS', format='101D', array=np.array(Obj[4]))\n",
    "    cTS = fits.Column(name='TS', format='101D', array=np.array(Obj[5]))\n",
    "    cT10M = fits.Column(name='T10M', format='101D', array=np.array(Obj[6]))\n",
    "    cU10M = fits.Column(name='U10M', format='101D', array=np.array(Obj[7]))\n",
    "    cV10M = fits.Column(name='V10M', format='101D', array=np.array(Obj[8]))\n",
    "    \n",
    "    cols = fits.ColDefs([cTQI,cTQL,cTQV,cQV10M,cPS,cTS,cT10M,cU10M,cV10M])\n",
    "    table = fits.BinTableHDU.from_columns(cols)\n",
    "    \n",
    "    return table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e043d9fd",
   "metadata": {},
   "source": [
    "## Just Combine the Functions cuz I'm Lazy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "64a42e7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Yay(Set1,Set2,Set3,PFile):\n",
    "    return WriteTable(ConstructCDF(GetStatistics(Set1,Set2,Set3,PFile)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "94c46577",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1654675559.8743098\n",
      "Month 01: Reading data...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_8195/2963484732.py:12: UserWarning: WARNING: valid_range not used since it\n",
      "cannot be safely cast to variable data type\n",
      "  time = xx.variables['time'][:] #minutes\n",
      "/tmp/ipykernel_8195/3704986700.py:100: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  if not RGF == -1:\n",
      "/tmp/ipykernel_8195/3704986700.py:37: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  if not RSF == -1:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There was a problem with the Stella data for Month 01\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 01\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 01:\n",
      "TQI, TQL : 31\n",
      "TQV : 4\n",
      "All others : 25\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 02: Reading data...\n",
      "There was a problem with the Gaulli data for Month 02\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 02\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 02\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 02:\n",
      "TQI, TQL : 29\n",
      "TQV : 29\n",
      "All others : 28\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 03: Reading data...\n",
      "There was a problem with the Gaulli data for Month 03\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 03\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 03\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 03:\n",
      "TQI, TQL : 31\n",
      "TQV : 29\n",
      "All others : 30\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 04: Reading data...\n",
      "There was a problem with the Gaulli data for Month 04\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 04\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 04\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 04:\n",
      "TQI, TQL : 30\n",
      "TQV : 30\n",
      "All others : 30\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 05: Reading data...\n",
      "There was a problem with the Gaulli data for Month 05\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 05\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 05\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 05:\n",
      "TQI, TQL : 31\n",
      "TQV : 31\n",
      "All others : 30\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 06: Reading data...\n",
      "There was a problem with the Gaulli data for Month 06\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 06\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 06\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 06:\n",
      "TQI, TQL : 30\n",
      "TQV : 30\n",
      "All others : 30\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 07: Reading data...\n",
      "There was a problem with the Gaulli data for Month 07\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 07\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 07\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 07:\n",
      "TQI, TQL : 31\n",
      "TQV : 30\n",
      "All others : 27\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 08: Reading data...\n",
      "There was a problem with the Gaulli data for Month 08\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 08\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 08\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 08:\n",
      "TQI, TQL : 31\n",
      "TQV : 26\n",
      "All others : 31\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 09: Reading data...\n",
      "There was a problem with the Gaulli data for Month 09\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 09\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 09\n",
      "Initiating manual reading 2...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 09:\n",
      "TQI, TQL : 30\n",
      "TQV : 22\n",
      "All others : 29\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 10: Reading data...\n",
      "There was a problem with the Gaulli data for Month 10\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 10\n",
      "Initiating manual reading...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 10:\n",
      "TQI, TQL : 31\n",
      "TQV : 29\n",
      "All others : 9\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 11: Reading data...\n",
      "There was a problem with the Gaulli data for Month 11\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 11\n",
      "Initiating manual reading...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 11:\n",
      "TQI, TQL : 30\n",
      "TQV : 27\n",
      "All others : 30\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "Month 12: Reading data...\n",
      "There was a problem with the Gaulli data for Month 12\n",
      "Initiating manual reading...\n",
      "There was a problem with the Stella data for Month 12\n",
      "Initiating manual reading...\n",
      "Computing mean values...\n",
      "Computing standard deviations...\n",
      "Number of day data for the month 12:\n",
      "TQI, TQL : 31\n",
      "TQV : 31\n",
      "All others : 28\n",
      "Making table...\n",
      "Month done\n",
      "\n",
      "Constructing CDF...\n",
      "\n",
      "\n",
      "1654676330.4165945\n",
      "Duration: 12 minutes, 759 seconds\n"
     ]
    }
   ],
   "source": [
    "#Run the function\n",
    "\n",
    "import time\n",
    "t00 = time.time()\n",
    "print(t00)\n",
    "\n",
    "S1 = [JanList,FebList,MarList,AprList,MayList,JunList,JulList,AugList,\n",
    "     SepList,OctList,NovList,DecList]\n",
    "S2 = [JanList_st,FebList_st,MarList_st,AprList_st,MayList_st,JunList_st,JulList_st,AugList_st,\n",
    "      SepList_st,OctList_st,NovList_st,DecList_st]\n",
    "S3 = [JanList_g,FebList_g,MarList_g,AprList_g,MayList_g,JunList_g,JulList_g,AugList_g,\n",
    "      SepList_g,OctList_g,NovList_g,DecList_g]\n",
    "\n",
    "hdu1 = Yay(S1[0],S2[0],S3[0],PWVM)\n",
    "hdu2 = Yay(S1[1],S2[1],S3[1],PWVM)\n",
    "hdu3 = Yay(S1[2],S2[2],S3[2],PWVM)\n",
    "hdu4 = Yay(S1[3],S2[3],S3[3],PWVM)\n",
    "hdu5 = Yay(S1[4],S2[4],S3[4],PWVM)\n",
    "hdu6 = Yay(S1[5],S2[5],S3[5],PWVM)\n",
    "hdu7 = Yay(S1[6],S2[6],S3[6],PWVM)\n",
    "hdu8 = Yay(S1[7],S2[7],S3[7],PWVM)\n",
    "hdu9 = Yay(S1[8],S2[8],S3[8],PWVM)\n",
    "hdu10 = Yay(S1[9],S2[9],S3[9],PWVM)\n",
    "hdu11 = Yay(S1[10],S2[10],S3[10],PWVM)\n",
    "hdu12 = Yay(S1[11],S2[11],S3[11],PWVM)\n",
    "\n",
    "t99 = time.time()\n",
    "print(t99)\n",
    "dt = t99-t00\n",
    "print('Duration: '+str(int(dt//60))+' minutes, '+str(int(round((dt-(dt//60)),0)))+' seconds')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "f90966ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make the redundant PrimaryHDU layer \n",
    "# Idk why I have to do this, but otherwise it won't write. \n",
    "n = np.ones((3,3))\n",
    "hdu0 = fits.PrimaryHDU(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "7917e700",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "To whomever using this: best of luck with your project.\n",
      "          - From the biggest coding noob in the history of CMB research\n"
     ]
    }
   ],
   "source": [
    "hdu = fits.HDUList([hdu0,hdu1,hdu2,hdu3,hdu4,hdu5,hdu6,hdu7,hdu8,hdu9,hdu10,hdu11,hdu12])\n",
    "hdu.writeto('../weather_Tenerife.fits')\n",
    "print('To whomever using this: best of luck with your project.')\n",
    "print('          - From the biggest coding noob in the history of CMB research')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a430bc32",
   "metadata": {},
   "source": [
    "# Edit Header: IMPORTANT: Don't forget to run these cells."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526a6b5e",
   "metadata": {},
   "source": [
    "Sike! We actually need to edit the header so the simulation will know how to play our data input. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "591df903",
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy.io import fits\n",
    "from astropy.utils.data import get_pkg_data_filename"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "id": "b54ff55b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: ../weather_Tenerife.fits\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       6   (3, 3)   float64   \n",
      "  1                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  2                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  3                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  4                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  5                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  6                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  7                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  8                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      "  9                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      " 10                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      " 11                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n",
      " 12                1 BinTableHDU     26   24R x 9C   [101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D, 101D]   \n"
     ]
    }
   ],
   "source": [
    "fits_file = get_pkg_data_filename('../weather_Tenerife.fits')\n",
    "fits.info(fits_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "480ae90e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before modifications:\n",
      "Extension 0:\n",
      "SIMPLE  =                    T / conforms to FITS standard                      \n",
      "BITPIX  =                  -64 / array data type                                \n",
      "NAXIS   =                    2 / number of array dimensions                     \n",
      "NAXIS1  =                    3                                                  \n",
      "NAXIS2  =                    3                                                  \n",
      "EXTEND  =                    T                                                  \n",
      "Extension 1:\n",
      "XTENSION= 'BINTABLE'           / binary table extension                         \n",
      "BITPIX  =                    8 / array data type                                \n",
      "NAXIS   =                    2 / number of array dimensions                     \n",
      "NAXIS1  =                 7272 / length of dimension 1                          \n",
      "NAXIS2  =                   24 / length of dimension 2                          \n",
      "PCOUNT  =                    0 / number of group parameters                     \n",
      "GCOUNT  =                    1 / number of groups                               \n",
      "TFIELDS =                    9 / number of table fields                         \n",
      "TTYPE1  = 'TQI     '                                                            \n",
      "TFORM1  = '101D    '                                                            \n",
      "TTYPE2  = 'TQL     '                                                            \n",
      "TFORM2  = '101D    '                                                            \n",
      "TTYPE3  = 'TQV     '                                                            \n",
      "TFORM3  = '101D    '                                                            \n",
      "TTYPE4  = 'QV10M   '                                                            \n",
      "TFORM4  = '101D    '                                                            \n",
      "TTYPE5  = 'PS      '                                                            \n",
      "TFORM5  = '101D    '                                                            \n",
      "TTYPE6  = 'TS      '                                                            \n",
      "TFORM6  = '101D    '                                                            \n",
      "TTYPE7  = 'T10M    '                                                            \n",
      "TFORM7  = '101D    '                                                            \n",
      "TTYPE8  = 'U10M    '                                                            \n",
      "TFORM8  = '101D    '                                                            \n",
      "TTYPE9  = 'V10M    '                                                            \n",
      "TFORM9  = '101D    '                                                            \n"
     ]
    }
   ],
   "source": [
    "print(\"Before modifications:\")\n",
    "print(\"Extension 0:\")\n",
    "print(repr(fits.getheader(fits_file, 0)))\n",
    "print(\"Extension 1:\")\n",
    "print(repr(fits.getheader(fits_file, 1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "667fe393",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in np.arange(13):\n",
    "    fits.setval(fits_file, 'PROBSTRT', value=0.0, ext = i)\n",
    "    fits.setval(fits_file, 'PROBSTOP', value=1.0, ext = i)\n",
    "    fits.setval(fits_file, 'PROBSTEP', value=0.01, ext = i)\n",
    "    fits.setval(fits_file, 'NSTEP', value=101, ext = i)\n",
    "    fits.setval(fits_file, 'SOURCE', value='MERRA-2: disc.gsfc.nasa.gov, STELLA, GAULLI, IAC', ext = i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9a8af55",
   "metadata": {},
   "source": [
    "# See what our .fits file looks like\n",
    "Warning: Pretty graphs ahead"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "id": "537379e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<astropy.io.fits.hdu.image.PrimaryHDU object at 0x7f7ba4f1ef70>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9e8c26a0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7ba0598670>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ec5b040>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9eba2c40>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9eba2130>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7ba4ca26d0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ebe4e80>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7ba49fc1c0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ebc0970>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ebc0f70>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ec060d0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ec060a0>]"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from astropy.io import fits\n",
    "from scipy import optimize\n",
    " \n",
    "hdu = fits.open('../weather_Tenerife.fits')\n",
    "hdu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "18b9712c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method HDUList.info of [<astropy.io.fits.hdu.image.PrimaryHDU object at 0x7f7ba4f1ef70>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9e8c26a0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7ba0598670>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ec5b040>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9eba2c40>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9eba2130>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7ba4ca26d0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ebe4e80>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7ba49fc1c0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ebc0970>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ebc0f70>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ec060d0>, <astropy.io.fits.hdu.table.BinTableHDU object at 0x7f7b9ec060a0>]>"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdu.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "3a6209d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XTENSION= 'BINTABLE'           / binary table extension                         \n",
       "BITPIX  =                    8 / array data type                                \n",
       "NAXIS   =                    2 / number of array dimensions                     \n",
       "NAXIS1  =                 7272 / length of dimension 1                          \n",
       "NAXIS2  =                   24 / length of dimension 2                          \n",
       "PCOUNT  =                    0 / number of group parameters                     \n",
       "GCOUNT  =                    1 / number of groups                               \n",
       "TFIELDS =                    9 / number of table fields                         \n",
       "TTYPE1  = 'TQI     '                                                            \n",
       "TFORM1  = '101D    '                                                            \n",
       "TTYPE2  = 'TQL     '                                                            \n",
       "TFORM2  = '101D    '                                                            \n",
       "TTYPE3  = 'TQV     '                                                            \n",
       "TFORM3  = '101D    '                                                            \n",
       "TTYPE4  = 'QV10M   '                                                            \n",
       "TFORM4  = '101D    '                                                            \n",
       "TTYPE5  = 'PS      '                                                            \n",
       "TFORM5  = '101D    '                                                            \n",
       "TTYPE6  = 'TS      '                                                            \n",
       "TFORM6  = '101D    '                                                            \n",
       "TTYPE7  = 'T10M    '                                                            \n",
       "TFORM7  = '101D    '                                                            \n",
       "TTYPE8  = 'U10M    '                                                            \n",
       "TFORM8  = '101D    '                                                            \n",
       "TTYPE9  = 'V10M    '                                                            \n",
       "TFORM9  = '101D    '                                                            \n",
       "PROBSTRT=                  0.0                                                  \n",
       "PROBSTOP=                  1.0                                                  \n",
       "PROBSTEP=                 0.01                                                  \n",
       "NSTEP   =                  101                                                  \n",
       "SOURCE  = 'MERRA-2: disc.gsfc.nasa.gov, STELLA, GAULLI, IAC'                    "
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdu[1].header"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e446c6b",
   "metadata": {},
   "source": [
    "If written properly, the length of dimension 2 has to be 24, and the format of each element has to be '101D.' If not, try transposing the table in the function ConstructCDF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "14655ae9",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(0.001,0.999,101)\n",
    "\n",
    "def CDF(x,mu,sigma,alpha):\n",
    "    return 0.5*alpha*(1+sp.erf((x-mu)/((np.sqrt(2))*sigma)))\n",
    "def iCDF(x,mu,sigma,alpha):\n",
    "    return ((np.sqrt(2))*sigma*sp.erfinv((1/alpha)*(2*x-1)))+mu\n",
    "\n",
    "def FitCDF(yelement, est):\n",
    "    params, params_covariance = optimize.curve_fit(CDF,yelement,x, p0=[est,2.5,1])\n",
    "    return params\n",
    "# the results are: "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d91f990e",
   "metadata": {},
   "source": [
    "# Fetch Data \n",
    "You have to run the following code in the proper order cuz I reused variable names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "1c4dd944",
   "metadata": {},
   "outputs": [],
   "source": [
    "data1 = hdu[1].data\n",
    "data2 = hdu[2].data\n",
    "data3 = hdu[3].data\n",
    "data4 = hdu[4].data\n",
    "data5 = hdu[5].data\n",
    "data6 = hdu[6].data\n",
    "data7 = hdu[7].data\n",
    "data8 = hdu[8].data\n",
    "data9 = hdu[9].data\n",
    "data10 = hdu[10].data\n",
    "data11 = hdu[11].data\n",
    "data12 = hdu[12].data\n",
    "# each of the data are monthly data\n",
    "\n",
    "## midnight data\n",
    "n1 = data1[0]\n",
    "n2 = data2[0]\n",
    "n3 = data3[0]\n",
    "n4 = data4[0]\n",
    "n5 = data5[0]\n",
    "n6 = data6[0]\n",
    "n7 = data7[0]\n",
    "n8 = data8[0]\n",
    "n9 = data9[0]\n",
    "n10 = data10[0]\n",
    "n11 = data11[0]\n",
    "n12 = data12[0]\n",
    "\n",
    "## midday data\n",
    "d1 = data1[11]\n",
    "d2 = data2[11]\n",
    "d3 = data3[11]\n",
    "d4 = data4[11]\n",
    "d5 = data5[11]\n",
    "d6 = data6[11]\n",
    "d7 = data7[11]\n",
    "d8 = data8[11]\n",
    "d9 = data9[11]\n",
    "d10 = data10[11]\n",
    "d11 = data11[11]\n",
    "d12 = data12[11]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54060f50",
   "metadata": {},
   "source": [
    "### TQI (Total Precipitable Ice Water)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "cc08c2c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "I1 = n1[0]\n",
    "I2 = n2[0]\n",
    "I3 = n3[0]\n",
    "I4 = n4[0]\n",
    "I5 = n5[0]\n",
    "I6 = n6[0]\n",
    "I7 = n7[0]\n",
    "I8 = n8[0]\n",
    "I9 = n9[0]\n",
    "I10 = n10[0]\n",
    "I11 = n11[0]\n",
    "I12 = n12[0]\n",
    "\n",
    "Id1 = d1[0]\n",
    "Id2 = d2[0]\n",
    "Id3 = d3[0]\n",
    "Id4 = d4[0]\n",
    "Id5 = d5[0]\n",
    "Id6 = d6[0]\n",
    "Id7 = d7[0]\n",
    "Id8 = d8[0]\n",
    "Id9 = d9[0]\n",
    "Id10 = d10[0]\n",
    "Id11 = d11[0]\n",
    "Id12 = d12[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "id": "20e5a8b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = 'TQI (Total Precipitable Ice)'\n",
    "YLabel = 'mass per area (kg/m**2)'\n",
    "est = 4\n",
    "y1 = np.array([I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12])\n",
    "y2 = np.array([Id1,Id2,Id3,Id4,Id5,Id6,Id7,Id8,Id9,Id10,Id11,Id12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74456a7e",
   "metadata": {},
   "source": [
    "### TQL (Total Precipitable Liquid Water)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "id": "e83503cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "L1 = n1[1]\n",
    "L2 = n2[1]\n",
    "L3 = n3[1]\n",
    "L4 = n4[1]\n",
    "L5 = n5[1]\n",
    "L6 = n6[1]\n",
    "L7 = n7[1]\n",
    "L8 = n8[1]\n",
    "L9 = n9[1]\n",
    "L10 = n10[1]\n",
    "L11 = n11[1]\n",
    "L12 = n12[1]\n",
    "\n",
    "Ld1 = d1[1]\n",
    "Ld2 = d2[1]\n",
    "Ld3 = d3[1]\n",
    "Ld4 = d4[1]\n",
    "Ld5 = d5[1]\n",
    "Ld6 = d6[1]\n",
    "Ld7 = d7[1]\n",
    "Ld8 = d8[1]\n",
    "Ld9 = d9[1]\n",
    "Ld10 = d10[1]\n",
    "Ld11 = d11[1]\n",
    "Ld12 = d12[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "f50f9905",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = 'TQL (Total Precipitable Liquid Water)'\n",
    "YLabel = 'mass per area (kg/m**2)'\n",
    "est = 1\n",
    "y11 = np.array([L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11,L12])\n",
    "y12 = np.array([Ld1,Ld2,Ld3,Ld4,Ld5,Ld6,Ld7,Ld8,Ld9,Ld10,Ld11,Ld12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a94e7423",
   "metadata": {},
   "source": [
    "### TQV (Total Precipitable Water Vapor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "d2476e77",
   "metadata": {},
   "outputs": [],
   "source": [
    "V1 = n1[2]\n",
    "V2 = n2[2]\n",
    "V3 = n3[2]\n",
    "V4 = n4[2]\n",
    "V5 = n5[2]\n",
    "V6 = n6[2]\n",
    "V7 = n7[2]\n",
    "V8 = n8[2]\n",
    "V9 = n9[2]\n",
    "V10 = n10[2]\n",
    "V11 = n11[2]\n",
    "V12 = n12[2]\n",
    "\n",
    "Vd1 = d1[2]\n",
    "Vd2 = d2[2]\n",
    "Vd3 = d3[2]\n",
    "Vd4 = d4[2]\n",
    "Vd5 = d5[2]\n",
    "Vd6 = d6[2]\n",
    "Vd7 = d7[2]\n",
    "Vd8 = d8[2]\n",
    "Vd9 = d9[2]\n",
    "Vd10 = d10[2]\n",
    "Vd11 = d11[2]\n",
    "Vd12 = d12[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "08309967",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = 'TQV (Total Precipitable Water Vapor)'\n",
    "YLabel = 'mass per area (kg/m**2)'\n",
    "est = 1\n",
    "y21 = np.array([V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12])\n",
    "y22 = np.array([Vd1,Vd2,Vd3,Vd4,Vd5,Vd6,Vd7,Vd8,Vd9,Vd10,Vd11,Vd12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f37c2d9",
   "metadata": {},
   "source": [
    "### QV10M (Specific Humidity at 10 m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "78e47e39",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1 = n1[3]\n",
    "Q2 = n2[3]\n",
    "Q3 = n3[3]\n",
    "Q4 = n4[3]\n",
    "Q5 = n5[3]\n",
    "Q6 = n6[3]\n",
    "Q7 = n7[3]\n",
    "Q8 = n8[3]\n",
    "Q9 = n9[3]\n",
    "Q10 = n10[3]\n",
    "Q11 = n11[3]\n",
    "Q12 = n12[3]\n",
    "\n",
    "Qd1 = d1[3]\n",
    "Qd2 = d2[3]\n",
    "Qd3 = d3[3]\n",
    "Qd4 = d4[3]\n",
    "Qd5 = d5[3]\n",
    "Qd6 = d6[3]\n",
    "Qd7 = d7[3]\n",
    "Qd8 = d8[3]\n",
    "Qd9 = d9[3]\n",
    "Qd10 = d10[3]\n",
    "Qd11 = d11[3]\n",
    "Qd12 = d12[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "id": "fc80d995",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = 'QV10M (10 m Specific Humidity)'\n",
    "YLabel = 'spcific humidity (kg/kg)'\n",
    "est = 0.001\n",
    "y31 = np.array([Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11,Q12])\n",
    "y32 = np.array([Qd1,Qd2,Qd3,Qd4,Qd5,Qd6,Qd7,Qd8,Qd9,Qd10,Qd11,Qd12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f889fa3",
   "metadata": {},
   "source": [
    "### PS (Surface Pressure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "0a3eb501",
   "metadata": {},
   "outputs": [],
   "source": [
    "P1 = n1[4]\n",
    "P2 = n2[4]\n",
    "P3 = n3[4]\n",
    "P4 = n4[4]\n",
    "P5 = n5[4]\n",
    "P6 = n6[4]\n",
    "P7 = n7[4]\n",
    "P8 = n8[4]\n",
    "P9 = n9[4]\n",
    "P10 = n10[4]\n",
    "P11 = n11[4]\n",
    "P12 = n12[4]\n",
    "\n",
    "Pd1 = d1[4]\n",
    "Pd2 = d2[4]\n",
    "Pd3 = d3[4]\n",
    "Pd4 = d4[4]\n",
    "Pd5 = d5[4]\n",
    "Pd6 = d6[4]\n",
    "Pd7 = d7[4]\n",
    "Pd8 = d8[4]\n",
    "Pd9 = d9[4]\n",
    "Pd10 = d10[4]\n",
    "Pd11 = d11[4]\n",
    "Pd12 = d12[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "id": "a51df0c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = 'Surface Pressure'\n",
    "YLabel = 'pressure (Pa)'\n",
    "est = 58000\n",
    "y41 = np.array([P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12])\n",
    "y42 = np.array([Pd1,Pd2,Pd3,Pd4,Pd5,Pd6,Pd7,Pd8,Pd9,Pd10,Pd11,Pd12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64195b85",
   "metadata": {},
   "source": [
    "### TS (Surface Skin Temperature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "3ca398e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "TS1 = n1[5]\n",
    "TS2 = n2[5]\n",
    "TS3 = n3[5]\n",
    "TS4 = n4[5]\n",
    "TS5 = n5[5]\n",
    "TS6 = n6[5]\n",
    "TS7 = n7[5]\n",
    "TS8 = n8[5]\n",
    "TS9 = n9[5]\n",
    "TS10 = n10[5]\n",
    "TS11 = n11[5]\n",
    "TS12 = n12[5]\n",
    "\n",
    "TSd1 = d1[5]\n",
    "TSd2 = d2[5]\n",
    "TSd3 = d3[5]\n",
    "TSd4 = d4[5]\n",
    "TSd5 = d5[5]\n",
    "TSd6 = d6[5]\n",
    "TSd7 = d7[5]\n",
    "TSd8 = d8[5]\n",
    "TSd9 = d9[5]\n",
    "TSd10 = d10[5]\n",
    "TSd11 = d11[5]\n",
    "TSd12 = d12[5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "id": "b1d3ad5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = 'Surface Skin Temperature'\n",
    "YLabel = 'temperature (K)'\n",
    "est = 275\n",
    "y51 = np.array([TS1,TS2,TS3,TS4,TS5,TS6,TS7,TS8,TS9,TS10,TS11,TS12])\n",
    "y52 = np.array([TSd1,TSd2,TSd3,TSd4,TSd5,TSd6,TSd7,TSd8,TSd9,TSd10,TSd11,TSd12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cce343c3",
   "metadata": {},
   "source": [
    "### T10M (10 m Air Temperature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "id": "a9c7762b",
   "metadata": {},
   "outputs": [],
   "source": [
    "T1 = n1[6]\n",
    "T2 = n2[6]\n",
    "T3 = n3[6]\n",
    "T4 = n4[6]\n",
    "T5 = n5[6]\n",
    "T6 = n6[6]\n",
    "T7 = n7[6]\n",
    "T8 = n8[6]\n",
    "T9 = n9[6]\n",
    "T10 = n10[6]\n",
    "T11 = n11[6]\n",
    "T12 = n12[6]\n",
    "\n",
    "Td1 = d1[6]\n",
    "Td2 = d2[6]\n",
    "Td3 = d3[6]\n",
    "Td4 = d4[6]\n",
    "Td5 = d5[6]\n",
    "Td6 = d6[6]\n",
    "Td7 = d7[6]\n",
    "Td8 = d8[6]\n",
    "Td9 = d9[6]\n",
    "Td10 = d10[6]\n",
    "Td11 = d11[6]\n",
    "Td12 = d12[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "id": "dba1be9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = '10 m Air Temperature'\n",
    "YLabel = 'temperature (K)'\n",
    "est = 270\n",
    "y61 = np.array([T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12])\n",
    "y62 = np.array([Td1,Td2,Td3,Td4,Td5,Td6,Td7,Td8,Td9,Td10,Td11,Td12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4222537c",
   "metadata": {},
   "source": [
    "### U10M (Eastward Wind Speed at 10 m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "15e0eed9",
   "metadata": {},
   "outputs": [],
   "source": [
    "U1 = n1[7]\n",
    "U2 = n2[7]\n",
    "U3 = n3[7]\n",
    "U4 = n4[7]\n",
    "U5 = n5[7]\n",
    "U6 = n6[7]\n",
    "U7 = n7[7]\n",
    "U8 = n8[7]\n",
    "U9 = n9[7]\n",
    "U10 = n10[7]\n",
    "U11 = n11[7]\n",
    "U12 = n12[7]\n",
    "\n",
    "Ud1 = d1[7]\n",
    "Ud2 = d2[7]\n",
    "Ud3 = d3[7]\n",
    "Ud4 = d4[7]\n",
    "Ud5 = d5[7]\n",
    "Ud6 = d6[7]\n",
    "Ud7 = d7[7]\n",
    "Ud8 = d8[7]\n",
    "Ud9 = d9[7]\n",
    "Ud10 = d10[7]\n",
    "Ud11 = d11[7]\n",
    "Ud12 = d12[7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "id": "0f0db600",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = '10 m Wind Speed (Eastward)'\n",
    "YLabel = 'wind speed (m/s)'\n",
    "est = 1\n",
    "y71 = np.array([U1,U2,U3,U4,U5,U6,U7,U8,U9,U10,U11,U12])\n",
    "y72 = np.array([Ud1,Ud2,Ud3,Ud4,Ud5,Ud6,Ud7,Ud8,Ud9,Ud10,Ud11,Ud12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35843739",
   "metadata": {},
   "source": [
    "### V10M (Northward Wind Speed at 10 m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "id": "c7d4093e",
   "metadata": {},
   "outputs": [],
   "source": [
    "VM1 = n1[8]\n",
    "VM2 = n2[8]\n",
    "VM3 = n3[8]\n",
    "VM4 = n4[8]\n",
    "VM5 = n5[8]\n",
    "VM6 = n6[8]\n",
    "VM7 = n7[8]\n",
    "VM8 = n8[8]\n",
    "VM9 = n9[8]\n",
    "VM10 = n10[8]\n",
    "VM11 = n11[8]\n",
    "VM12 = n12[8]\n",
    "\n",
    "VMd1 = d1[8]\n",
    "VMd2 = d2[8]\n",
    "VMd3 = d3[8]\n",
    "VMd4 = d4[8]\n",
    "VMd5 = d5[8]\n",
    "VMd6 = d6[8]\n",
    "VMd7 = d7[8]\n",
    "VMd8 = d8[8]\n",
    "VMd9 = d9[8]\n",
    "VMd10 = d10[8]\n",
    "VMd11 = d11[8]\n",
    "VMd12 = d12[8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "id": "032a5509",
   "metadata": {},
   "outputs": [],
   "source": [
    "Title_gen = '10 m Wind Speed (Northward)'\n",
    "YLabel = 'wind speed (m/s)'\n",
    "est = 1\n",
    "y81 = np.array([VM1,VM2,VM3,VM4,VM5,VM6,VM7,VM8,VM9,VM10,VM11,VM12])\n",
    "y82 = np.array([VMd1,VMd2,VMd3,VMd4,VMd5,VMd6,VMd7,VMd8,VMd9,VMd10,VMd11,VMd12])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d27d420",
   "metadata": {},
   "source": [
    "## Put on a clubbing mix let's go"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "id": "5fe0f7ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I like my plots nice and colorful.\n",
    "colors9 = ['#CBA195','#CBBF95','#CACB95','#ACCB95','#95CBB6','#95BFCB',\n",
    "          '#95A8CB','#AE95CB','#CB95CA']\n",
    "month = np.array([1,2,3,4,5,6,7,8,9,10,11,12])\n",
    "TitleVar = ['TQI (Total Precipitable Ice)',\n",
    "            'TQL (Total Precipitable Liquid Water)',\n",
    "            'TQV (Total Precipitable Water Vapor)',\n",
    "            'QV10M (10 m Specific Humidity)',\n",
    "            'Surface Pressure',\n",
    "            'Surface Skin Temperature',\n",
    "            '10 m Air Temperature',\n",
    "            '10 m Wind Speed (Eastward)',\n",
    "            '10 m Wind Speed (Northward)']\n",
    "YLabelVar = ['mass per area (kg/m**2)',\n",
    "             'mass per area (kg/m**2)',\n",
    "             'mass per area (kg/m**2)',\n",
    "             'spcific humidity (kg/kg)',\n",
    "             'pressure (Pa)',\n",
    "             'temperature (K)',\n",
    "             'temperature (K)',\n",
    "             'wind speed (m/s)',\n",
    "             'wind speed (m/s)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "701ecf5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "YY1 = np.array([y1,y11,y21,y31,y41,y51,y61,y71,y81])\n",
    "YY2 = np.array([y2,y12,y22,y32,y42,y52,y62,y72,y82])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "b758ed85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.10782914 -0.07939018 -0.07025376 -0.06430533 -0.05978433 -0.05608632\n",
      " -0.05292772 -0.05015161 -0.04766161 -0.04539407 -0.04330463 -0.04136109\n",
      " -0.03953931 -0.03782067 -0.03619051 -0.03463705 -0.03315069 -0.03172347\n",
      " -0.03034875 -0.02902088 -0.02773504 -0.02648707 -0.02527335 -0.02409072\n",
      " -0.02293637 -0.02180782 -0.02070286 -0.0196195  -0.01855594 -0.01751055\n",
      " -0.01648186 -0.01546849 -0.01446921 -0.01348286 -0.01250837 -0.01154474\n",
      " -0.01059104 -0.0096464  -0.00870999 -0.00778104 -0.0068588  -0.00594256\n",
      " -0.00503165 -0.00412542 -0.00322323 -0.00232447 -0.00142855 -0.00053489\n",
      "  0.00035709  0.00124796  0.00213826  0.00302856  0.00391943  0.00481141\n",
      "  0.00570507  0.00660099  0.00749975  0.00840194  0.00930817  0.01021908\n",
      "  0.01113532  0.01205756  0.01298651  0.01392292  0.01486756  0.01582126\n",
      "  0.01678489  0.01775938  0.01874573  0.01974501  0.02075838  0.02178707\n",
      "  0.02283246  0.02389602  0.02497938  0.02608434  0.02721289  0.02836724\n",
      "  0.02954987  0.03076359  0.03201156  0.0332974   0.03462527  0.03599999\n",
      "  0.03742721  0.03891357  0.04046703  0.04209719  0.04381583  0.04563761\n",
      "  0.04758114  0.04967059  0.05193813  0.05442813  0.05720424  0.06036284\n",
      "  0.06406085  0.06858185  0.07453028  0.0836667   0.11210566]\n",
      "[-0.10966644 -0.08047514 -0.07109703 -0.06499125 -0.06035064 -0.0565548\n",
      " -0.05331265 -0.0504631  -0.04790723 -0.0455797  -0.04343498 -0.04144003\n",
      " -0.03957006 -0.03780596 -0.03613267 -0.03453811 -0.03301243 -0.03154746\n",
      " -0.03013637 -0.02877337 -0.02745351 -0.02617253 -0.02492671 -0.02371279\n",
      " -0.0225279  -0.0213695  -0.02023531 -0.01912328 -0.01803159 -0.01695855\n",
      " -0.01590264 -0.01486247 -0.01383675 -0.01282431 -0.01182403 -0.01083491\n",
      " -0.00985598 -0.00888635 -0.00792518 -0.00697165 -0.00602501 -0.00508454\n",
      " -0.00414953 -0.00321932 -0.00229326 -0.00137073 -0.00045111  0.00046619\n",
      "  0.00138177  0.0022962   0.00321006  0.00412391  0.00503834  0.00595392\n",
      "  0.00687122  0.00779084  0.00871338  0.00963943  0.01056964  0.01150465\n",
      "  0.01244512  0.01339176  0.01434529  0.01530647  0.0162761   0.01725503\n",
      "  0.01824415  0.01924442  0.02025687  0.02128258  0.02232275  0.02337866\n",
      "  0.0244517   0.0255434   0.02665542  0.02778961  0.02894801  0.0301329\n",
      "  0.03134682  0.03259265  0.03387363  0.03519349  0.03655648  0.03796757\n",
      "  0.03943254  0.04095823  0.04255278  0.04422607  0.04599017  0.04786015\n",
      "  0.0498551   0.05199981  0.05432734  0.05688321  0.05973276  0.06297492\n",
      "  0.06677076  0.07141136  0.07751715  0.08689526  0.11608655]\n",
      "[-0.12553146 -0.0922161  -0.08151307 -0.07454468 -0.06924846 -0.06491635\n",
      " -0.06121616 -0.05796403 -0.05504708 -0.05239071 -0.049943   -0.04766621\n",
      " -0.04553205 -0.04351872 -0.04160904 -0.03978921 -0.03804798 -0.03637604\n",
      " -0.0347656  -0.03321004 -0.03170372 -0.03024176 -0.02881993 -0.02743451\n",
      " -0.02608222 -0.02476016 -0.02346574 -0.02219661 -0.02095069 -0.01972605\n",
      " -0.01852096 -0.01733384 -0.01616321 -0.01500773 -0.01386614 -0.01273728\n",
      " -0.01162005 -0.01051344 -0.00941647 -0.00832823 -0.00724785 -0.00617451\n",
      " -0.0051074  -0.00404578 -0.00298889 -0.00193603 -0.00088648  0.00016041\n",
      "  0.00120534  0.00224896  0.00329192  0.00433489  0.0053785   0.00642343\n",
      "  0.00747033  0.00851987  0.00957274  0.01062962  0.01169125  0.01275835\n",
      "  0.0138317   0.01491207  0.01600031  0.01709728  0.0182039   0.01932113\n",
      "  0.02044999  0.02159158  0.02274706  0.02391768  0.02510481  0.02630989\n",
      "  0.02753453  0.02878046  0.03004958  0.03134401  0.03266607  0.03401835\n",
      "  0.03540377  0.0368256   0.03828756  0.03979388  0.04134944  0.04295989\n",
      "  0.04463182  0.04637305  0.04819288  0.05010257  0.0521159   0.05425006\n",
      "  0.05652684  0.05897456  0.06163092  0.06454788  0.0678      0.0715002\n",
      "  0.07583231  0.08112852  0.08809692  0.09879994  0.1321153 ]\n",
      "[-0.13968015 -0.10223903 -0.09021055 -0.08237919 -0.07642709 -0.0715585\n",
      " -0.06740007 -0.06374521 -0.06046702 -0.05748169 -0.05473086 -0.05217211\n",
      " -0.04977366 -0.047511   -0.04536482 -0.04331962 -0.04136276 -0.03948377\n",
      " -0.03767389 -0.03592569 -0.03423283 -0.03258982 -0.03099191 -0.02943492\n",
      " -0.02791517 -0.02642939 -0.02497466 -0.02354837 -0.02214815 -0.02077185\n",
      " -0.01941753 -0.0180834  -0.0167678  -0.01546922 -0.01418626 -0.0129176\n",
      " -0.01166202 -0.01041836 -0.00918554 -0.00796253 -0.00674836 -0.0055421\n",
      " -0.00434285 -0.00314975 -0.00196198 -0.00077872  0.00040079  0.00157734\n",
      "  0.00275167  0.00392453  0.00509665  0.00626877  0.00744163  0.00861596\n",
      "  0.00979251  0.01097202  0.01215528  0.01334305  0.01453615  0.0157354\n",
      "  0.01694166  0.01815583  0.01937884  0.02061166  0.02185532  0.0231109\n",
      "  0.02437956  0.02566252  0.0269611   0.0282767   0.02961083  0.03096515\n",
      "  0.03234145  0.03374167  0.03516796  0.03662269  0.03810847  0.03962822\n",
      "  0.04118521  0.04278312  0.04442613  0.04611899  0.04786719  0.04967707\n",
      "  0.05155606  0.05351292  0.05555812  0.0577043   0.05996696  0.06236541\n",
      "  0.06492416  0.06767499  0.07066032  0.07393851  0.07759337  0.0817518\n",
      "  0.08662039  0.09257249  0.10040385  0.11243233  0.14987345]\n",
      "[-0.13090352 -0.09616332 -0.08500255 -0.07773612 -0.0722134  -0.06769602\n",
      " -0.06383757 -0.06044636 -0.05740464 -0.05463468 -0.05208228 -0.04970811\n",
      " -0.04748268 -0.04538324 -0.04339188 -0.04149422 -0.03967852 -0.03793508\n",
      " -0.03625576 -0.03463367 -0.03306293 -0.03153845 -0.03005581 -0.02861113\n",
      " -0.02720101 -0.02582241 -0.02447263 -0.02314923 -0.02185001 -0.020573\n",
      " -0.01931638 -0.01807848 -0.01685779 -0.01565289 -0.01446248 -0.01328533\n",
      " -0.01212033 -0.01096638 -0.00982249 -0.00868771 -0.00756113 -0.00644188\n",
      " -0.00532914 -0.00422211 -0.00312002 -0.00202213 -0.0009277   0.00016397\n",
      "  0.00125359  0.00234184  0.00342941  0.00451698  0.00560523  0.00669485\n",
      "  0.00778652  0.00888095  0.00997884  0.01108093  0.01218796  0.0133007\n",
      "  0.01441995  0.01554653  0.01668132  0.0178252   0.01897915  0.02014416\n",
      "  0.0213213   0.02251171  0.02371661  0.0249373   0.0261752   0.02743182\n",
      "  0.02870883  0.03000805  0.03133145  0.03268124  0.03405984  0.03546996\n",
      "  0.03691463  0.03839727  0.03992175  0.0414925   0.04311458  0.0447939\n",
      "  0.04653735  0.04835304  0.05025071  0.05224206  0.0543415   0.05656694\n",
      "  0.0589411   0.0614935   0.06426347  0.06730518  0.07069639  0.07455484\n",
      "  0.07907222  0.08459494  0.09186137  0.10302214  0.13776234]\n",
      "[-2.15089378e-01 -1.58066393e-01 -1.39746964e-01 -1.27819768e-01\n",
      " -1.18754701e-01 -1.11339815e-01 -1.05006507e-01 -9.94401342e-02\n",
      " -9.44474335e-02 -8.99007741e-02 -8.57112348e-02 -8.18142562e-02\n",
      " -7.81614048e-02 -7.47153601e-02 -7.14467187e-02 -6.83318742e-02\n",
      " -6.53515664e-02 -6.24898587e-02 -5.97334011e-02 -5.70708880e-02\n",
      " -5.44926505e-02 -5.19903467e-02 -4.95567213e-02 -4.71854178e-02\n",
      " -4.48708295e-02 -4.26079795e-02 -4.03924243e-02 -3.82201748e-02\n",
      " -3.60876308e-02 -3.39915273e-02 -3.19288889e-02 -2.98969918e-02\n",
      " -2.78933316e-02 -2.59155956e-02 -2.39616390e-02 -2.20294646e-02\n",
      " -2.01172050e-02 -1.82231069e-02 -1.63455177e-02 -1.44828731e-02\n",
      " -1.26336867e-02 -1.07965400e-02 -8.97007405e-03 -7.15298140e-03\n",
      " -5.34399892e-03 -3.54190115e-03 -1.74549416e-03  4.63903035e-05\n",
      "  1.83490025e-03  3.62116875e-03  5.40631898e-03  7.19146921e-03\n",
      "  8.97773771e-03  1.07662477e-02  1.25581321e-02  1.43545391e-02\n",
      "  1.61566369e-02  1.79656194e-02  1.97827120e-02  2.16091780e-02\n",
      "  2.34463247e-02  2.52955111e-02  2.71581557e-02  2.90357449e-02\n",
      "  3.09298430e-02  3.28421026e-02  3.47742770e-02  3.67282336e-02\n",
      "  3.87059696e-02  4.07096298e-02  4.27415268e-02  4.48041653e-02\n",
      "  4.69002688e-02  4.90328128e-02  5.12050623e-02  5.34206174e-02\n",
      "  5.56834674e-02  5.79980558e-02  6.03693592e-02  6.28029846e-02\n",
      "  6.53052885e-02  6.78835259e-02  7.05460391e-02  7.33024966e-02\n",
      "  7.61642044e-02  7.91445122e-02  8.22593566e-02  8.55279981e-02\n",
      "  8.89740427e-02  9.26268942e-02  9.65238728e-02  1.00713412e-01\n",
      "  1.05260071e-01  1.10252772e-01  1.15819145e-01  1.22152453e-01\n",
      "  1.29567339e-01  1.38632406e-01  1.50559602e-01  1.68879031e-01\n",
      "  2.25902016e-01]\n",
      "[-0.0953547  -0.06956171 -0.06127536 -0.05588038 -0.05178001 -0.04842607\n",
      " -0.04556135 -0.04304353 -0.0407852  -0.03872863 -0.03683359 -0.03507089\n",
      " -0.03341861 -0.03185987 -0.03038138 -0.02897246 -0.02762438 -0.02632996\n",
      " -0.02508314 -0.02387882 -0.02271261 -0.02158076 -0.02047996 -0.01940736\n",
      " -0.01836041 -0.01733687 -0.01633471 -0.01535215 -0.01438754 -0.01343942\n",
      " -0.01250644 -0.01158736 -0.01068105 -0.00978647 -0.00890264 -0.00802867\n",
      " -0.00716371 -0.00630696 -0.00545767 -0.00461515 -0.00377872 -0.00294773\n",
      " -0.00212157 -0.00129965 -0.0004814   0.00033374  0.0011463   0.00195681\n",
      "  0.0027658   0.00357378  0.00438125  0.00518872  0.00599669  0.00680568\n",
      "  0.0076162   0.00842876  0.0092439   0.01006215  0.01088407  0.01171022\n",
      "  0.01254121  0.01337765  0.01422017  0.01506945  0.0159262   0.01679117\n",
      "  0.01766514  0.01854897  0.01944355  0.02034986  0.02126894  0.02220192\n",
      "  0.02315004  0.02411465  0.02509721  0.02609937  0.02712291  0.02816986\n",
      "  0.02924246  0.03034326  0.03147511  0.03264132  0.03384564  0.03509246\n",
      "  0.03638688  0.03773495  0.03914388  0.04062237  0.04218111  0.04383339\n",
      "  0.04559609  0.04749113  0.0495477   0.05180603  0.05432385  0.05718857\n",
      "  0.06054251  0.06464288  0.07003786  0.07832421  0.10411719]\n",
      "[-1.50310351e-01 -1.10113157e-01 -9.71992481e-02 -8.87914132e-02\n",
      " -8.24011790e-02 -7.71742054e-02 -7.27096691e-02 -6.87857676e-02\n",
      " -6.52662648e-02 -6.20611897e-02 -5.91078591e-02 -5.63607633e-02\n",
      " -5.37857600e-02 -5.13565408e-02 -4.90523785e-02 -4.68566323e-02\n",
      " -4.47557249e-02 -4.27384222e-02 -4.07953135e-02 -3.89184290e-02\n",
      " -3.71009529e-02 -3.53370047e-02 -3.36214699e-02 -3.19498678e-02\n",
      " -3.03182458e-02 -2.87230957e-02 -2.71612851e-02 -2.56300020e-02\n",
      " -2.41267085e-02 -2.26491029e-02 -2.11950879e-02 -1.97627434e-02\n",
      " -1.83503039e-02 -1.69561391e-02 -1.55787371e-02 -1.42166901e-02\n",
      " -1.28686815e-02 -1.15334756e-02 -1.02099073e-02 -8.89687382e-03\n",
      " -7.59332744e-03 -6.29826823e-03 -5.01073820e-03 -3.72981568e-03\n",
      " -2.45461026e-03 -1.18425808e-03  8.20825035e-05  1.34523502e-03\n",
      "  2.60600875e-03  3.86520240e-03  5.12360776e-03  6.38201312e-03\n",
      "  7.64120678e-03  8.90198051e-03  1.01651330e-02  1.14314736e-02\n",
      "  1.27018258e-02  1.39770312e-02  1.52579537e-02  1.65454838e-02\n",
      "  1.78405430e-02  1.91440894e-02  2.04571228e-02  2.17806911e-02\n",
      "  2.31158971e-02  2.44639056e-02  2.58259526e-02  2.72033546e-02\n",
      "  2.85975194e-02  3.00099589e-02  3.14423034e-02  3.28963185e-02\n",
      "  3.43739240e-02  3.58772175e-02  3.74085006e-02  3.89703112e-02\n",
      "  4.05654613e-02  4.21970833e-02  4.38686855e-02  4.55842202e-02\n",
      "  4.73481684e-02  4.91656445e-02  5.10425290e-02  5.29856377e-02\n",
      "  5.50029404e-02  5.71038478e-02  5.92995940e-02  6.16037564e-02\n",
      "  6.40329755e-02  6.66079789e-02  6.93550747e-02  7.23084053e-02\n",
      "  7.55134803e-02  7.90329832e-02  8.29568847e-02  8.74214209e-02\n",
      "  9.26483945e-02  9.90386287e-02  1.07446464e-01  1.20360372e-01\n",
      "  1.60557566e-01]\n",
      "[-1.14159364e-01 -8.31450731e-02 -7.31813000e-02 -6.66942045e-02\n",
      " -6.17637961e-02 -5.77309057e-02 -5.42862766e-02 -5.12587761e-02\n",
      " -4.85432910e-02 -4.60704037e-02 -4.37917508e-02 -4.16722190e-02\n",
      " -3.96854658e-02 -3.78111930e-02 -3.60334082e-02 -3.43392723e-02\n",
      " -3.27183096e-02 -3.11618523e-02 -2.96626398e-02 -2.82145227e-02\n",
      " -2.68122425e-02 -2.54512618e-02 -2.41276348e-02 -2.28379041e-02\n",
      " -2.15790202e-02 -2.03482764e-02 -1.91432558e-02 -1.79617887e-02\n",
      " -1.68019172e-02 -1.56618653e-02 -1.45400147e-02 -1.34348841e-02\n",
      " -1.23451113e-02 -1.12694384e-02 -1.02066989e-02 -9.15580654e-03\n",
      " -8.11574567e-03 -7.08556270e-03 -6.06435874e-03 -5.05128304e-03\n",
      " -4.04552710e-03 -3.04631947e-03 -2.05292101e-03 -1.06462060e-03\n",
      " -8.07312361e-05  8.99413592e-04  1.87646326e-03  2.85105316e-03\n",
      "  3.82380770e-03  4.79534313e-03  5.76627035e-03  6.73719756e-03\n",
      "  7.70873300e-03  8.68148753e-03  9.65607744e-03  1.06331271e-02\n",
      "  1.16132719e-02  1.25971613e-02  1.35854617e-02  1.45788602e-02\n",
      "  1.55780678e-02  1.65838237e-02  1.75968994e-02  1.86181034e-02\n",
      "  1.96482864e-02  2.06883472e-02  2.17392396e-02  2.28019791e-02\n",
      "  2.38776520e-02  2.49674248e-02  2.60725554e-02  2.71944060e-02\n",
      "  2.83344579e-02  2.94943294e-02  3.06757965e-02  3.18808171e-02\n",
      "  3.31115609e-02  3.43704448e-02  3.56601755e-02  3.69838025e-02\n",
      "  3.83447832e-02  3.97470634e-02  4.11951805e-02  4.26943930e-02\n",
      "  4.42508502e-02  4.58718130e-02  4.75659489e-02  4.93437337e-02\n",
      "  5.12180065e-02  5.32047597e-02  5.53242915e-02  5.76029444e-02\n",
      "  6.00758316e-02  6.27913168e-02  6.58188173e-02  6.92634464e-02\n",
      "  7.32963368e-02  7.82267452e-02  8.47138407e-02  9.46776138e-02\n",
      "  1.25691904e-01]\n",
      "[-7.16889458e-02 -5.14826254e-02 -4.49910633e-02 -4.07646139e-02\n",
      " -3.75523717e-02 -3.49248773e-02 -3.26806447e-02 -3.07081784e-02\n",
      " -2.89389951e-02 -2.73278684e-02 -2.58432885e-02 -2.44623787e-02\n",
      " -2.31679763e-02 -2.19468568e-02 -2.07886007e-02 -1.96848433e-02\n",
      " -1.86287594e-02 -1.76147019e-02 -1.66379403e-02 -1.56944682e-02\n",
      " -1.47808596e-02 -1.38941583e-02 -1.30317935e-02 -1.21915127e-02\n",
      " -1.13713292e-02 -1.05694793e-02 -9.78438857e-03 -9.01464336e-03\n",
      " -8.25896796e-03 -7.51620538e-03 -6.78530129e-03 -6.06529051e-03\n",
      " -5.35528559e-03 -4.65446700e-03 -3.96207475e-03 -3.27740110e-03\n",
      " -2.59978434e-03 -1.92860319e-03 -1.26327201e-03 -6.03236525e-04\n",
      "  5.20300122e-05  7.03030219e-04  1.35024566e-03  1.99413963e-03\n",
      "  2.63515974e-03  3.27374022e-03  3.91030415e-03  4.54526550e-03\n",
      "  5.17903109e-03  5.81200240e-03  6.44457745e-03  7.07715251e-03\n",
      "  7.71012382e-03  8.34388941e-03  8.97885076e-03  9.61541469e-03\n",
      "  1.02539952e-02  1.08950153e-02  1.15389093e-02  1.21861247e-02\n",
      "  1.28371249e-02  1.34923914e-02  1.41524269e-02  1.48177581e-02\n",
      "  1.54889392e-02  1.61665560e-02  1.68512297e-02  1.75436219e-02\n",
      "  1.82444405e-02  1.89544454e-02  1.96744562e-02  2.04053603e-02\n",
      "  2.11481229e-02  2.19037983e-02  2.26735435e-02  2.34586342e-02\n",
      "  2.42604841e-02  2.50806676e-02  2.59209484e-02  2.67833132e-02\n",
      "  2.76700145e-02  2.85836231e-02  2.95270952e-02  3.05038568e-02\n",
      "  3.15179143e-02  3.25739982e-02  3.36777557e-02  3.48360117e-02\n",
      "  3.60571313e-02  3.73515336e-02  3.87324434e-02  4.02170233e-02\n",
      "  4.18281500e-02  4.35973333e-02  4.55697996e-02  4.78140322e-02\n",
      "  5.04415266e-02  5.36537688e-02  5.78802182e-02  6.43717803e-02\n",
      "  8.45781007e-02]\n",
      "[-1.29570264e-01 -9.49595131e-02 -8.38403269e-02 -7.66009787e-02\n",
      " -7.10988333e-02 -6.65982833e-02 -6.27542102e-02 -5.93756366e-02\n",
      " -5.63452599e-02 -5.35856132e-02 -5.10427245e-02 -4.86774089e-02\n",
      " -4.64602690e-02 -4.43686529e-02 -4.23847137e-02 -4.04941234e-02\n",
      " -3.86851916e-02 -3.69482454e-02 -3.52751821e-02 -3.36591393e-02\n",
      " -3.20942487e-02 -3.05754469e-02 -2.90983302e-02 -2.76590405e-02\n",
      " -2.62541747e-02 -2.48807121e-02 -2.35359556e-02 -2.22174840e-02\n",
      " -2.09231121e-02 -1.96508582e-02 -1.83989163e-02 -1.71656331e-02\n",
      " -1.59494887e-02 -1.47490793e-02 -1.35631031e-02 -1.23903478e-02\n",
      " -1.12296800e-02 -1.00800356e-02 -8.94041140e-03 -7.80985802e-03\n",
      " -6.68747322e-03 -5.57239608e-03 -4.46380175e-03 -3.36089664e-03\n",
      " -2.26291409e-03 -1.16911030e-03 -7.87605858e-05  1.00884412e-03\n",
      "  2.09440064e-03  3.17859667e-03  4.26211396e-03  5.34563126e-03\n",
      "  6.42982729e-03  7.51538381e-03  8.60298852e-03  9.69333823e-03\n",
      "  1.07871420e-02  1.18851246e-02  1.29880297e-02  1.40966240e-02\n",
      "  1.52117012e-02  1.63340860e-02  1.74646393e-02  1.86042635e-02\n",
      "  1.97539080e-02  2.09145757e-02  2.20873310e-02  2.32733072e-02\n",
      "  2.44737167e-02  2.56898611e-02  2.69231442e-02  2.81750861e-02\n",
      "  2.94473400e-02  3.07417119e-02  3.20601835e-02  3.34049400e-02\n",
      "  3.47784026e-02  3.61832684e-02  3.76225581e-02  3.90996748e-02\n",
      "  4.06184766e-02  4.21833673e-02  4.37994100e-02  4.54724733e-02\n",
      "  4.72094195e-02  4.90183513e-02  5.09089417e-02  5.28928809e-02\n",
      "  5.49844970e-02  5.72016368e-02  5.95669524e-02  6.21098411e-02\n",
      "  6.48694878e-02  6.78998645e-02  7.12784381e-02  7.51225112e-02\n",
      "  7.96230613e-02  8.51252067e-02  9.23645548e-02  1.03483741e-01\n",
      "  1.38094492e-01]\n",
      "[-0.12611046 -0.09279162 -0.08208748 -0.07511836 -0.06982159 -0.06548904\n",
      " -0.06178845 -0.05853599 -0.05561873 -0.05296209 -0.05051412 -0.0482371\n",
      " -0.04610272 -0.04408917 -0.04217929 -0.04035927 -0.03861786 -0.03694575\n",
      " -0.03533514 -0.03377941 -0.03227294 -0.03081083 -0.02938885 -0.02800328\n",
      " -0.02665086 -0.02532866 -0.0240341  -0.02276484 -0.02151879 -0.02029402\n",
      " -0.01908881 -0.01790156 -0.01673081 -0.01557521 -0.0144335  -0.01330453\n",
      " -0.01218718 -0.01108045 -0.00998336 -0.00889501 -0.00781452 -0.00674107\n",
      " -0.00567385 -0.00461212 -0.00355512 -0.00250214 -0.00145249 -0.00040549\n",
      "  0.00063955  0.00168328  0.00272635  0.00376942  0.00481315  0.00585818\n",
      "  0.00690519  0.00795484  0.00900782  0.01006481  0.01112655  0.01219376\n",
      "  0.01326722  0.01434771  0.01543606  0.01653315  0.01763988  0.01875722\n",
      "  0.0198862   0.02102791  0.02218351  0.02335426  0.02454151  0.02574672\n",
      "  0.02697148  0.02821754  0.0294868   0.03078136  0.03210355  0.03345598\n",
      "  0.03484154  0.03626352  0.03772563  0.03923211  0.04078783  0.04239845\n",
      "  0.04407056  0.04581197  0.04763199  0.04954187  0.05155541  0.05368979\n",
      "  0.05596682  0.05841479  0.06107143  0.06398869  0.06724115  0.07094173\n",
      "  0.07527429  0.08057106  0.08754018  0.09824432  0.13156315]\n"
     ]
    }
   ],
   "source": [
    "print(data1[11][3])\n",
    "print(data2[11][3])\n",
    "print(data3[11][3])\n",
    "print(data4[11][3])\n",
    "print(data5[11][3])\n",
    "print(data6[11][3])\n",
    "print(data7[11][3])\n",
    "print(data8[11][3])\n",
    "print(data9[11][3])\n",
    "print(data10[11][3])\n",
    "print(data11[11][3])\n",
    "print(data12[11][3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "b0343b84",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/silee/.pyenv/versions/3.8.7/lib/python3.8/site-packages/scipy/optimize/minpack.py:833: OptimizeWarning: Covariance of the parameters could not be estimated\n",
      "  warnings.warn('Covariance of the parameters could not be estimated',\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, axes = plt.subplots(figsize= (15,10),nrows=3, ncols=3,\n",
    "                            constrained_layout=True)\n",
    "#figure.tight_layout(rect=[0, 0.08, 1, 0.95])\n",
    "figure.suptitle('Monthly Mean Values - TENERIFE')\n",
    "figure.text(0.5, -0.01, 'month', ha='center', va='center', rotation='horizontal')\n",
    "\n",
    "for i in range(9):\n",
    "    \n",
    "    List_Y1 = []\n",
    "    for j in range(0,12):\n",
    "        List_Y1.append(FitCDF(YY1[i][j],YY1[i][j][50])[0])\n",
    "    Y1 = np.array(List_Y1)\n",
    "    \n",
    "    List_Y2 = []\n",
    "    for k in range(0,12):\n",
    "        List_Y2.append(FitCDF(YY2[i][k],YY2[i][k][50])[0])\n",
    "    Y2 = np.array(List_Y2)\n",
    "    \n",
    "    n = (i)%3\n",
    "    m = (i-n)/3\n",
    "     \n",
    "    axes[int(m),int(n)].plot(month,Y1,color='b',label='midnight')\n",
    "    axes[int(m),int(n)].plot(month,Y2,color='r',label='midday')\n",
    "    axes[int(m),int(n)].legend()\n",
    "    axes[int(m),int(n)].set_title(TitleVar[i])\n",
    "    axes[int(m),int(n)].set_ylabel(YLabelVar[i])\n",
    "    axes[int(m),int(n)].grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93753ee6",
   "metadata": {},
   "source": [
    "# Appendix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d7015ad",
   "metadata": {},
   "source": [
    "## Opening a .nc4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e058701c",
   "metadata": {},
   "source": [
    "### Find out more about the variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50a0fd04",
   "metadata": {},
   "outputs": [],
   "source": [
    "from netCDF4 import Dataset\n",
    "\n",
    "file = './filename'\n",
    "xx = Dataset(file)\n",
    "for var in xx.variables.values():\n",
    "    print(var)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
